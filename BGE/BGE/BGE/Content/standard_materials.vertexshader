#version 330 

layout (location = 0) in vec3 v_coord;
layout (location = 1) in vec3 v_normal;
layout (location = 2) in vec3 v_diffuse;

out vec4 position;  // position of the vertex (and fragment) in world space
out vec3 varyingNormalDirection;  // surface normal vector in world space

uniform vec3 ambient;
uniform vec3 specular;
uniform vec3 diffuse;
uniform bool diffusePerVertex;

uniform mat4 m, v, p;
uniform mat3 n;

out vec3 model_ambient; 
out vec3 model_diffuse; 
out vec3 model_specular; 

void main()
{
  position = m * vec4(v_coord, 1.0);
  varyingNormalDirection = normalize(n * v_normal);
 
  mat4 mvp = p*v*m;
  gl_Position = mvp * vec4(v_coord, 1.0);
  model_diffuse = diffuse;
  if (diffusePerVertex)
  {
	model_diffuse = v_diffuse;
  }
  else
  {
	model_diffuse = diffuse; 
  }
  model_ambient = ambient;
  model_specular = specular;
}