#version 330 

in vec4 position;  // position of the vertex (and fragment) in world space
in vec3 varyingNormalDirection;  // surface normal vector in world space

uniform mat4 m, v, p;
mat4 v_inv;

in vec3 model_diffuse;
in vec3 model_ambient;
in vec3 model_specular;
 
struct lightSource
{
  vec4 position;
  vec4 diffuse;
  vec4 specular;
  float constantAttenuation, linearAttenuation, quadraticAttenuation;
  float spotCutoff, spotExponent;
  vec3 spotDirection;
};
const int numberOfLights = 3;
lightSource lights[numberOfLights];

lightSource light0 = lightSource(
  vec4(0.52, 0.57, 0.62, 0.0),
  vec4(1, 0.96, 0.81, 1.0),
  vec4(1, 0.96, 0.81, 1.0),
  0.0, 1.0, 0.0,
  180.0, 0.0,
  vec3(0.0, 0.0, 0.0)
);

lightSource light1 = lightSource(
    vec4(-0.71, -0.34, -0.60, 0.0),
    vec4(0.96, 0.76, 0.40, 1.0),
    vec4(0, 0, 0, 1.0),
    0.0, 1.0, 0.0,
   180.0, 10.0,
    vec3(0.0, 1.0, 0.0)
);

lightSource light2 = lightSource(
    vec4(-0.45, 0.76, -0.45, 0.0),
    vec4(0.32, 0.36, 0.39, 1.0),
    vec4(0.32, 0.36, 0.39, 1.0),
    0.0, 1.0, 0.0,
    180.0, 10.0,
    vec3(0.0, 1.0, 0.0)
);


vec4 scene_ambient = vec4(1.0, 1.0, 1.0, 1.0);
 
struct material
{
  vec4 ambient;
  vec4 diffuse;
  vec4 specular;
  float shininess;
};
material frontMaterial = material(
  vec4(model_ambient, 1.0),
  vec4(model_diffuse, 1.0),
  vec4(model_specular, 1.0),
  50.0
);
 
void main()
{
  lights[0] = light0;
  lights[1] = light1;
  lights[2] = light2;
 

  v_inv = inverse(v);
  vec3 normalDirection = normalize(varyingNormalDirection);

  vec3 viewDirection = normalize(vec3(v_inv * vec4(0.0, 0.0, 0.0, 1.0) - position));
  vec3 lightDirection;
  float attenuation;
 
  // initialize total lighting with ambient lighting
  vec3 totalLighting = vec3(scene_ambient) * vec3(frontMaterial.ambient);
 
  for (int index = 0; index < numberOfLights; index++) // for all light sources
    {
      if (0.0 == lights[index].position.w) // directional light?
        {
          attenuation = 1.0; // no attenuation
          lightDirection = normalize(vec3(lights[index].position));
        } 
      else // point light or spotlight (or other kind of light) 
        {
          vec3 positionToLightSource = vec3(lights[index].position - position);
          float distance = length(positionToLightSource);
          lightDirection = normalize(positionToLightSource);
          attenuation = 1.0 / (lights[index].constantAttenuation
                               + lights[index].linearAttenuation * distance
                               + lights[index].quadraticAttenuation * distance * distance);
 
          if (lights[index].spotCutoff <= 90.0) // spotlight?
            {
              float clampedCosine = max(0.0, dot(-lightDirection, normalize(lights[index].spotDirection)));
              if (clampedCosine < cos(radians(lights[index].spotCutoff))) // outside of spotlight cone?
                {
                  attenuation = 0.0;
                }
              else
                {
                  attenuation = attenuation * pow(clampedCosine, lights[index].spotExponent);   
                }
            }
        }
 
      vec3 diffuseReflection = attenuation 
        * vec3(lights[index].diffuse) * vec3(frontMaterial.diffuse)
        * max(0.0, dot(normalDirection, lightDirection));
 
      vec3 specularReflection;
      if (dot(normalDirection, lightDirection) < 0.0) // light source on the wrong side?
        {
          specularReflection = vec3(0.0, 0.0, 0.0); // no specular reflection
        }
      else // light source on the right side
        {
          specularReflection = attenuation * vec3(lights[index].specular) * vec3(frontMaterial.specular) 
            * pow(max(0.0, dot(reflect(-lightDirection, normalDirection), viewDirection)), frontMaterial.shininess);
        }
 
      totalLighting = totalLighting + diffuseReflection + specularReflection;
    }
 
  gl_FragColor = vec4(totalLighting, 1.0);
}