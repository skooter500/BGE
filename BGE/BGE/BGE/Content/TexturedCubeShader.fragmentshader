#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;

// Ouput data
out vec4 color;

// Values that stay constant for the whole mesh.
uniform sampler2D myTextureSampler;
smooth in vec4 vEyeSpacePos; 

struct FogParameters 
{ 
   vec4 vFogColor; // Fog color
   float fStart; // This is only for linear fog
   float fEnd; // This is only for linear fog
   float fDensity; // For exp and exp2 equation
    
   int iEquation; // 0 = linear, 1 = exp, 2 = exp2
} fogParams; 

float getFogFactor(FogParameters params, float fFogCoord) 
{ 
   float fResult = 0.0; 
   if(params.iEquation == 0) 
      fResult = (params.fEnd-fFogCoord)/(params.fEnd-params.fStart); 
   else if(params.iEquation == 1) 
      fResult = exp(-params.fDensity*fFogCoord); 
   else if(params.iEquation == 2) 
      fResult = exp(-pow(params.fDensity*fFogCoord, 2.0)); 
       
   fResult = 1.0-clamp(fResult, 0.0, 1.0); 
    
   return fResult; 
}

void main(){

	fogParams.fDensity = 0.04f; 
    fogParams.fStart = 100.0f; 
    fogParams.fEnd = 150.0f; 
    fogParams.vFogColor = vec4(0.0f, 0.0f, 0.0f, 1.0f); 
    fogParams.iEquation = 0; 

	// Output color = color of the texture at the specified UV
	color = vec4(texture2D( myTextureSampler, UV ).rgb, 1.0f);
	float fFogCoord = abs(vEyeSpacePos.z/vEyeSpacePos.w); 
	color = mix(color, fogParams.vFogColor, getFogFactor(fogParams, fFogCoord)); 
}